# -*- coding: utf-8 -*-
"""Copy of bot1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JgldQoLNGB5u1bvPbPfUzx3QjQQq7O5v
"""

import nltk

nltk.download('all')

import random
import json
import pickle
import numpy as np

from nltk.stem import WordNetLemmatizer

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation, Dropout
from tensorflow.keras.optimizers.schedules import ExponentialDecay
from tensorflow.keras.optimizers import SGD

lemmatizer = WordNetLemmatizer()

intents = json.loads(open('intents.json').read())

words = []
classes = []
documents = []
ignore_letters = ['?', '!',',','.']

for intent in intents['intents']:
    for pattern in intent['patterns']:
        word_list = nltk.word_tokenize(pattern)
        words.extend(word_list)
        documents.append((word_list,intent['tag']))
        if intent['tag'] not in classes:
            classes.append(intent['tag'])

words = [lemmatizer.lemmatize(word) for word in words if word not in ignore_letters]
words = sorted(set(words))

classes = sorted(set(classes))

pickle.dump(words, open('words.pkl', 'wb'))
pickle.dump(classes, open('classes.pkl', 'wb'))

training = []
output_empty = [0] * len(classes)

for document in documents:
    bag =[]
    word_patterns = document[0]
    word_patterns = [lemmatizer.lemmatize(word.lower()) for word in word_patterns]
    for word in words:
        bag.append(1) if word in word_patterns else bag.append(0)

    output_row = list(output_empty)
    output_row[classes.index(document[1])] = 1
    training.append([bag, output_row])

random.shuffle(training)
training = np.array(training)

train_x = list(training[:, 0])
train_y = list(training[:, 1])

model = Sequential()
model.add(Dense(128, input_shape=(len(train_x[0]),), activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(len(train_y[0]), activation='softmax'))

initial_learning_rate = 0.01
decay_steps = 1000
decay_rate = 0.96
learning_rate_fn = ExponentialDecay(initial_learning_rate, decay_steps, decay_rate)

sgd = SGD(learning_rate=learning_rate_fn, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])
hist = model.fit(np.array(train_x), np.array(train_y), epochs=300, batch_size=3, verbose=1)
model.save('chatbotmodel.h5', hist)

print('Done')

import random
import json
import pickle
import numpy as np
import nltk
from nltk.stem import WordNetLemmatizer
from tensorflow.keras.models import load_model
from tensorflow.keras.optimizers.schedules import ExponentialDecay
from tensorflow.keras.optimizers import SGD
import googlesearch

lemmatizer = WordNetLemmatizer()

model = load_model('chatbotmodel.h5')
words = pickle.load(open('words.pkl', 'rb'))
classes = pickle.load(open('classes.pkl', 'rb'))

initial_learning_rate = 0.01
decay_steps = 1000
decay_rate = 0.96
learning_rate_fn = ExponentialDecay(initial_learning_rate, decay_steps, decay_rate)
sgd = SGD(learning_rate=learning_rate_fn, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])

def preprocess_input(input_text):
    tokens = nltk.word_tokenize(input_text.lower())
    lemmatized_tokens = [lemmatizer.lemmatize(token) for token in tokens]
    bag_of_words = [int(word in lemmatized_tokens) for word in words]
    return np.array([bag_of_words])

def predict_intent(input_text):
    preprocessed_input = preprocess_input(input_text)
    output = model.predict(preprocessed_input)[0]
    intent_idx = np.argmax(output)
    return classes[intent_idx], output[intent_idx]

def retrieve_answer(query):
    search_results = googlesearch.search(query, num=1)
    for result in search_results:
        return result

def main():
    print("Hi! I'm TraivisBot. How can I help you?")
    while True:
        user_input = input("You: ")
        if user_input.lower() == "exit":
            break
        intent, probability = predict_intent(user_input)
        if probability > 0.7:
            for intent_data in intents['intents']:
                if intent_data['tag'] == intent:
                    responses = intent_data['responses']
                    print(random.choice(responses))
                    break
        else:
            print("Let me look it up for you...")
            answer = retrieve_answer(user_input)
            if answer:
                print(answer)
            else:
                print("I'm sorry, I couldn't find an answer for that.")

main()